#summary OpenMP tutorial


= Introduction =

This is an introductory tutorial for OpenMP using GCC.
The tutorial runs on Linux and has been checked on Ubuntu.

= System pre-requisites =

We need packages `build-essential` and and `libgomp1`. The first package installs in one step all basic development tools for Ubuntu, like the GCC compiler, GNU make, etc. The `libgomp1` is the GCC OpenMP support library. Install them using:

<pre>
sudo apt-get install build-essential libgomp1
</pre>

= Building =

File `common.mk` is supposed to be included in every project. It contains the necessary OpenMP flags in order to build the programs. This way, a project with a single source file, `hello.c` which is supposed to create the executable `hello` needs only the following declarations:

{{{
TARGET	:= hello
OBJ	:= hello.o
include ../common.mk
}}}

To build the project, just run `make`.

There is also a master Makefile. The only thing it does is to call all programs default or clean targets. Thus, to build overything from the top level directory, run:
{{{
$ make
}}}
and to delete all binaries and intermediate files, run:
{{{
$ make clean
}}}

= Hello, OpenMP =

The Hello, OpenMP program is in directory hello.

OpenMP controls parallelism using pre-processing directives, known as pragmas. All OpenMP directives start with `#pragma omp` or simply `#omp`.

The pre-processor directive `#pragma omp parallel` defines a parallel region. The `private` clause takes program variables as comma separated arguments and states that one copy of each variable will be created for all threads, and this variable will be private to the thread.

Build it:
{{{
$ make
gcc -fopenmp   -c -o hello.o hello.c
gcc -fopenmp  hello.o   -o hello
}}}

Note that my CPU is an Intel i5-750 quad core. So, running the program, results in four threads:
{{{
$ ./hello
Hello from OpenMP thread 0
Hello from OpenMP thread 1
Hello from OpenMP thread 2
Hello from OpenMP thread 3
}}}

To control the number of threads externally, use the OMP_NUM_THREADS environment variable. See the demonstration for two threads.

{{{
$ export OMP_NUM_THREADS=2
$ ./hello
Hello from OpenMP thread 0
Hello from OpenMP thread 1
}}}
Also, we can overload cores with more than one threads. See what happens for 8 threads.
{{{
$ export OMP_NUM_THREADS=8
$ ./hello
Hello from OpenMP thread 7
Hello from OpenMP thread 3
Hello from OpenMP thread 4
Hello from OpenMP thread 5
Hello from OpenMP thread 1
Hello from OpenMP thread 6
Hello from OpenMP thread 2
Hello from OpenMP thread 0
}}}

= References =

For more tutorials, see the following online content.

 * http://www.ipd.uni-karlsruhe.de/multicore/research/download/HowToGuide-OpenMP.pdf
 * http://www.ichec.ie/Slides/OpenMP/ICHEC-OpenMPCourseSlides.pdf